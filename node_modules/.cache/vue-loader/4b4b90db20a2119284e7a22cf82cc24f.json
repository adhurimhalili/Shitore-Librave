{"remainingRequest":"C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\src\\components\\admin\\Editbook.vue?vue&type=template&id=65b4613a&","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\src\\components\\admin\\Editbook.vue","mtime":1678534585293},{"path":"C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678534575928},{"path":"C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1678534584705},{"path":"C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678534575928},{"path":"C:\\Users\\Admin\\Desktop\\UBT\\Semestri V\\Zhvillimi dhe Dizajnimi i Ueb\\Projekt\\Shitore-Librave-Komik\\node_modules\\vue-loader\\lib\\index.js","mtime":1678534584704}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}